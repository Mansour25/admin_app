import 'dart:io';import 'package:admin_app/controller/categories/category_controller.dart';import 'package:admin_app/core/class/crud.dart';import 'package:admin_app/core/constant/AppLink.dart';import 'package:admin_app/core/functions/printing.dart';import 'package:admin_app/core/functions/upload_file.dart';import 'package:admin_app/core/model/Category_model.dart';import 'package:admin_app/data/remote_data/category_data.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:get/get.dart';import 'package:google_fonts/google_fonts.dart';class AddEditCategoriesController extends GetxController {  bool? is_add;  bool? is_svg;  CategoriesData categoriesData = CategoriesData(Crud());  CategoryModel? category;  TextEditingController controller_ar = TextEditingController();  TextEditingController controller_en = TextEditingController();  File? file;  add_image(context) async {    checkFileAccessPermission(context);    file = await file_upload_callery();    update();  }  edit_category(context) async {    checkFileAccessPermission(context);    file = await file_upload_callery();    if (file != null) {      await categoriesData          .edit_category(controller_en.text, controller_en.text, file!)          .then((val) {        Get.snackbar('Edited Done Successfully', '');      });    }  }  Widget get_image() {    return is_add != true        ? is_svg == true            ? SvgPicture.network(                '${AppLink.image_categories}/${category!.categoryImage}')            : Image.network(                '${AppLink.image_categories}/${category!.categoryImage}')        : (file != null)            ? Image.file(file!)            : Container(                decoration: BoxDecoration(                  borderRadius: BorderRadius.circular(15),                  color: Colors.transparent,                  border: Border.all(),                ),                child: Center(                  child: Text(                    'Add Image',                    style: GoogleFonts.alike().copyWith(                      fontSize: 20,                    ),                  ),                ),              );  }  get_category() {    // if Edit Only    is_svg = category!.categoryImage!.substring(                    category!.categoryImage!.length - 3,                    category!.categoryImage!.length) ==                'svg' ||            category!.categoryImage!.substring(                    category!.categoryImage!.length - 3,                    category!.categoryImage!.length) ==                'SVG'        ? true        : false;    controller_ar.text = category!.categoryNameAr.toString();    controller_en.text = category!.categoryName.toString();    update();  }  add_category(context) async {    if (file != null && controller_en.text != '' && controller_ar.text != '') {      await categoriesData          .add_category(controller_en.text, controller_ar.text, file!)          .then((val) async {        space_print(val);        if (val['status'] == 'success') {          Get.snackbar('Added successfully', '');          // await get_categories();          file = null;          controller_ar.clear();          controller_en.clear();          Navigator.pop(context);          update();        } else {          Get.snackbar('Something seems to be wrong', 'try again');        }      });    } else {      Get.snackbar('There\'s no picture', 'Choose a photo from the gallery');    }  }  @override  void onClose() {    // TODO: implement onClose    CategoryController controller = Get.find();    controller.get_categories();    super.onClose();  }  @override  void onInit() {    // TODO: implement onInit    category = Get.arguments['category'];    if (category == null) {      is_add = true;    } else {      is_add = false;      get_category();    }    super.onInit();  }}