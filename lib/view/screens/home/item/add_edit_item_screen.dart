import 'package:admin_app/controller/categories/add_edit_category_controller.dart';import 'package:admin_app/controller/items/add_edit_item_controller.dart';import 'package:admin_app/core/constant/AppLink.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:google_fonts/google_fonts.dart';import 'package:flutter_svg/flutter_svg.dart';class AddItemScreen extends StatelessWidget {  const AddItemScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    Get.lazyPut(() => AddEditItemController());    return GetBuilder<AddEditItemController>(builder: (controller) {      return Scaffold(        appBar: AppBar(          backgroundColor: Colors.black,          title: Text('Add Item'),          elevation: 0,        ),        body: SingleChildScrollView(          physics: BouncingScrollPhysics(),          child: Container(            margin: EdgeInsets.symmetric(horizontal: 20, vertical: 10),            width: double.infinity,            child: Form(              key: controller.formKey,              child: Column(                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  GestureDetector(                    onTap: () async {                      await controller.upload_image(context);                    },                    child: SizedBox(                      height: 200,                      width: 200,                      child: controller.is_add == true                          ? Container(                              decoration: BoxDecoration(                                borderRadius: BorderRadius.circular(10),                                border: Border.all(                                  color: Colors.black54,                                ),                              ),                              child: controller.file != null                                  ? Image.file(controller.file!)                                  : Center(                                      child: Text('Add Image'),                                    ),                            )                          : controller.open_file_editing == true ? controller.image_is_svg == true                          ? SvgPicture.file(controller.file!)                          : Image.file(controller.file!)  :controller.image_is_svg == true                          ? SvgPicture.network(controller.link_image!)                          : Image.network(controller.link_image!),                    ),                  ),                  SizedBox(                    height: 10,                  ),                  CustomTextField(                    controller: controller.item_name,                    hint: 'item Name',                    is_desc: false,                  ),                  CustomTextField(                    controller: controller.item_name_ar,                    hint: 'item Name Arabic',                    is_desc: false,                  ),                  CustomTextField(                    controller: controller.item_desc,                    hint: 'item Description',                    is_desc: true,                  ),                  CustomTextField(                    controller: controller.item_desc_ar,                    hint: 'item Description Arabic',                    is_desc: true,                  ),                  Padding(                    padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),                    child: Column(                      children: [                        Row(                          children: [                            Text(                              'Item Active   ',                              style: GoogleFonts.acme().copyWith(fontSize: 18),                            ),                            if (controller.switch_value == false)                              SizedBox(                                width: Get.width / 3,                                child: Text(                                  'The item will not appear to users',                                  maxLines: 2,                                  overflow: TextOverflow.ellipsis,                                  style: TextStyle(fontSize: 12),                                ),                              ),                            Spacer(),                            Switch(                              value: controller.switch_value,                              onChanged: (value) =>                                  controller.change_witch_value(value),                            ),                          ],                        ),                        SizedBox(                          height: 10,                        ),                        Row(                          children: [                            Text(                              'Item price',                              style: GoogleFonts.acme().copyWith(fontSize: 18),                            ),                            Spacer(),                            SizedBox(                              height: 30,                              width: 100,                              child: TextFormField(                                controller: controller.item_price,                                validator: (val) {                                  if (val!.isEmpty) {                                    return 'Price cannot be empty';                                  }                                  return null;                                },                                keyboardType: TextInputType.number,                              ),                            ),                          ],                        ),                        Row(                          children: [                            Text(                              'Item Count',                              style: GoogleFonts.acme().copyWith(fontSize: 18),                            ),                            Spacer(),                            SizedBox(                              height: 30,                              width: 100,                              child: TextFormField(                                controller: controller.item_count,                                validator: (val) {                                  if (val!.isEmpty) {                                    return 'count cannot be empty';                                  }                                  return null;                                },                                keyboardType: TextInputType.number,                              ),                            ),                          ],                        ),                        Row(                          children: [                            Text(                              'Item Discount',                              style: GoogleFonts.acme().copyWith(fontSize: 18),                            ),                            Spacer(),                            SizedBox(                              height: 30,                              width: 100,                              child: TextFormField(                                controller: controller.item_discount,                                validator: (val) {                                  if (val!.isEmpty) {                                    return 'discount cannot be empty';                                  }                                  return null;                                },                                keyboardType: TextInputType.number,                              ),                            ),                          ],                        ),                        SizedBox(                          height: 10,                        ),                        Row(                          children: [                            Text(                              'Category Type',                              style: GoogleFonts.acme().copyWith(fontSize: 18),                            ),                            Spacer(),                            DropdownButton(                              value: controller.select_value,                              items: controller.menu_items,                              onChanged: (value) {                                controller.change_value_drop_button(value);                              },                            ),                          ],                        ),                      ],                    ),                  ),                  GestureDetector(                    onTap: () {                      controller.is_add!                          ? controller.AddItem()                          : controller.EditItem();                    },                    child: Container(                      decoration: BoxDecoration(                        borderRadius: BorderRadius.circular(15),                        color: Colors.black,                      ),                      padding:                          EdgeInsets.symmetric(horizontal: 25, vertical: 10),                      margin:                          EdgeInsets.symmetric(horizontal: 25, vertical: 20),                      child: Center(                        child: Text(                          controller.is_add! ? 'Add Item' : 'Edit Item',                          style: GoogleFonts.acme().copyWith(                            fontSize: 20,                            color: Colors.white,                          ),                        ),                      ),                    ),                  ),                ],              ),            ),          ),        ),      );    });  }}Widget CustomTextField(    {required TextEditingController controller,    required String hint,    required bool is_desc}) {  return Padding(    padding: const EdgeInsets.all(8.0),    child: TextFormField(      controller: controller,      validator: (val) {        if (val!.isEmpty) {          return '$hint cannot be empty';        }        return null;      },      decoration: InputDecoration(        border: OutlineInputBorder(),        label: Text(hint),        labelStyle: GoogleFonts.acme().copyWith(),        focusedBorder: _InputBorder(),        enabledBorder: _InputBorder(),      ),      maxLength: is_desc ? 200 : 20,      maxLines: is_desc ? 3 : 1,    ),  );}OutlineInputBorder _InputBorder() {  return OutlineInputBorder(    borderRadius: BorderRadius.circular(10),    borderSide: BorderSide(color: Colors.black),  );}