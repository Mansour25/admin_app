import 'package:admin_app/controller/categories/category_controller.dart';import 'package:admin_app/core/constant/AppLink.dart';import 'package:admin_app/core/functions/status_request.dart';import 'package:admin_app/core/model/Category_model.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:get/get.dart';import 'package:google_fonts/google_fonts.dart';import 'package:jiffy/jiffy.dart';class CategoryScreen extends StatelessWidget {  const CategoryScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    // AnimationController animationController ;    Get.lazyPut(() => CategoryController());    return GetBuilder<CategoryController>(builder: (logic) {      if (logic.statusRequest == StatusRequest.success) {        return Scaffold(          bottomNavigationBar: GestureDetector(            onTap: () {              logic.GoToAddCategoryScreen(-1);            },            child: Container(              height: 40,              decoration: BoxDecoration(                color: Colors.black,                borderRadius: BorderRadius.circular(15),              ),              margin: EdgeInsets.symmetric(                vertical: 10,                horizontal: 25,              ),              child: Center(                child: Text(                  'New Category',                  style: GoogleFonts.alata().copyWith(                    fontSize: 18,                    color: Colors.white,                  ),                ),              ),            ),          ),          appBar: AppBar(            backgroundColor: Colors.black,            title: Text(              'All Categories',              style: TextStyle(                fontSize: 18,              ),            ),            actions: [              IconButton(                onPressed: () {                  logic.get_categories();                },                icon: Icon(Icons.refresh),              ),            ],            centerTitle: true,          ),          body: Container(            margin: EdgeInsets.all(15),            child: ListView.separated(              physics: BouncingScrollPhysics(),              itemBuilder: (context, index) {                CategoryModel category = logic.categories_list[index];                String image_path =                    '${AppLink.image_categories}/${category.categoryImage}';                String image_type = category.categoryImage!.substring(                    category.categoryImage!.length - 3,                    category.categoryImage!.length);                print(index.toString() + ' : ' + image_type.toString());                return Card(                  child: Padding(                    padding: const EdgeInsets.all(8.0),                    child: ListTile(                      title: Text(category.categoryName.toString()),                      subtitle: Text(                        Jiffy(category.categoryDatetime.toString())                            .fromNow(),                        style: TextStyle(color: Colors.black54, fontSize: 13),                      ),                      leading: SizedBox(                        // color: Colors.red,                        // height: 250,                        width: 100,                        child: image_type == 'svg'                            ? SvgPicture.network(image_path)                            : (category.categoryImage != 'empty')                                ? Image.network(image_path)                                : SizedBox(),                      ),                      // contentPadding: ,                      trailing: SizedBox(                        width: 100,                        child: Row(                          children: [                            IconButton(                              onPressed: () {                                logic.GoToAddCategoryScreen(index);                              },                              icon: Icon(Icons.edit),                            ),                            IconButton(                                onPressed: () {                                  logic.delete_cat(                                      category.categoryId.toString(), context);                                },                                icon: Icon(Icons.delete_outline)),                          ],                        ),                      ),                    ),                  ),                );              },              separatorBuilder: (context, index) {                return Padding(                  padding: const EdgeInsets.symmetric(vertical: 15),                  child: Divider(                    height: 1,                    color: Colors.black,                    endIndent: 50,                    indent: 50,                  ),                );              },              itemCount: logic.categories_list.length,            ),          ),        );      }      if (logic.statusRequest == StatusRequest.loading) {        return Center(child: CircularProgressIndicator());      }      if (logic.statusRequest == StatusRequest.failure) {        return Scaffold(          body: Center(            child: Column(              children: [                Text(                  'Try again',                  style: TextStyle(                    fontSize: 18,                  ),                ),                SizedBox(                  height: 20,                ),                SizedBox(                    child: ActionChip(                  onPressed: () {                    logic.get_categories();                  },                  label: Padding(                    padding: EdgeInsets.all(10),                    child: Text(                      'Update',                      style: TextStyle(                        fontWeight: FontWeight.w500,                        fontSize: 16,                      ),                    ),                  ),                )),              ],            ),          ),        );      }      return Container(        child: Center(          child: Text(            'خطأ غير معروف',            style: TextStyle(fontSize: 25),          ),        ),      );    });  }}