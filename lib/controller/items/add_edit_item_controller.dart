import 'dart:io';import 'package:admin_app/controller/categories/category_controller.dart';import 'package:admin_app/controller/items/item_controller.dart';import 'package:admin_app/core/class/crud.dart';import 'package:admin_app/core/constant/AppLink.dart';import 'package:admin_app/core/functions/printing.dart';import 'package:admin_app/core/functions/upload_file.dart';import 'package:admin_app/core/model/Category_model.dart';import 'package:admin_app/data/remote_data/items_data.dart';import 'package:dartz/dartz.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import '../../core/model/ItemModel.dart';class AddEditItemController extends GetxController {  MainItemModel? item;  List<CategoryModel>? categories;  bool? image_is_svg;  bool? is_add;  GlobalKey<FormState> formKey = GlobalKey<FormState>();  ItemsData itemsData = ItemsData(Crud());  File? file;  String? link_image;  TextEditingController item_name = TextEditingController();  TextEditingController item_name_ar = TextEditingController();  TextEditingController item_desc = TextEditingController();  TextEditingController item_desc_ar = TextEditingController();  TextEditingController item_discount = TextEditingController();  TextEditingController item_count = TextEditingController();  TextEditingController item_price = TextEditingController();  String select_value = '';  String id_category_selected = '0';  bool switch_value = true;  change_witch_value(bool value) {    switch_value = value;    update();  }  change_value_drop_button(value) {    select_value = value;    categories!.forEach((element) {      if (element.categoryName == select_value) {        id_category_selected = element.categoryId.toString();      }    });    space_print(id_category_selected);    update();  }  List<DropdownMenuItem> menu_items = [];  init_category() {    select_value = categories![0].categoryName.toString();    categories!.forEach((element) {      menu_items.add(        DropdownMenuItem(          value: element.categoryName.toString(),          child: Text(            element.categoryName.toString(),          ),        ),      );    });    update();  }  AddItem() async {    if (formKey.currentState!.validate() && file != null) {      await itemsData          .add_item(        file!,        item_name.text,        item_name_ar.text,        item_desc.text,        item_desc_ar.text,        item_discount.text,        item_count.text,        switch_value == true ? '1' : '0',        item_price.text,        id_category_selected,      )          .then((val) async {        if (val['status'] == 'success') {          Get.snackbar('Added Item Successfully', '');          ItemController controller = Get.find();          await controller.get_items();          Get.close(0);        }      });    } else {      Get.snackbar('Make sure all fields are filled out', '');    }    update();  }bool? open_file_editing ;  upload_image(context) async {    checkFileAccessPermission(context);    file = await file_upload_callery();    if (file !=null){      open_file_editing = true ;    }    update();  }  init_item_for_edit() {    item_name.text = item!.itemName;    item_name_ar.text = item!.itemNameAr;    item_desc.text = item!.itemDesc;    item_desc_ar.text = item!.itemDescAr;    item_discount.text = item!.itemDiscount.toString();    item_count.text = item!.itemCount.toString();    item_price.text = item!.itemPrice.toString();    link_image = '${AppLink.image_items}/${item!.itemImage}';    item!.itemActive.toString() == '1'        ? switch_value = true        : switch_value = false;    categories!.forEach((element) {      if (element.categoryId.toString() == item!.itemCat.toString()) {        change_value_drop_button(element.categoryName);      }    });    image_is_svg = item!.itemImage!.substring(                    item!.itemImage!.length - 3, item!.itemImage!.length) ==                'svg' ||            item!.itemImage!.substring(                    item!.itemImage!.length - 3, item!.itemImage!.length) ==                'SVG'        ? true        : false;    update();  }  EditItem() async {    try {      await itemsData          .edit_item(        file!,        item!.itemId.toString(),        item_name.text,        item_name_ar.text,        item_desc.text,        item_desc_ar.text,        item_discount.text,        item_count.text,        switch_value == true ? '1' : '0',        item_price.text,        id_category_selected.toString(),        item!.itemImage.toString(),      )          .then((val) async {        if (val['status'] == 'success') {          Get.snackbar('Added Item Successfully', '');          ItemController controller = Get.find();          await controller.get_items();          Get.back();        }      });    } catch (e) {      space_print(e);    }  }  @override  void onInit() {// TODO: implement onInit    item = Get.arguments['item'];    categories = Get.arguments['categories'];    init_category();    if (item == null) {      is_add = true;    } else {      is_add = false;      init_item_for_edit();    }    super.onInit();  }}