import 'dart:math';import 'package:admin_app/controller/categories/category_controller.dart';import 'package:admin_app/controller/items/item_controller.dart';import 'package:admin_app/core/constant/AppLink.dart';import 'package:admin_app/core/functions/printing.dart';import 'package:admin_app/core/functions/status_request.dart';import 'package:admin_app/core/model/Category_model.dart';import 'package:admin_app/core/model/ItemModel.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:get/get.dart';import 'package:google_fonts/google_fonts.dart';import 'package:jiffy/jiffy.dart';class ItemScreen extends StatelessWidget {  const ItemScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    Get.lazyPut(() => ItemController());    return GetBuilder<ItemController>(builder: (logic) {      if (logic.statusRequest == StatusRequest.success) {        return Scaffold(          bottomNavigationBar: GestureDetector(              onTap: (){                logic.GoToAddEdit(null);              },              child: Container(            height: 40,            margin: EdgeInsets.symmetric(vertical: 10, horizontal: 25),            decoration: BoxDecoration(              color: Colors.black,              borderRadius: BorderRadius.circular(15),            ),            child: Center(              child: Text('Add Item',style: GoogleFonts.acme().copyWith(                fontSize: 20,color: Colors.white              ),),            ),          )),          body: CustomScrollView(            physics: BouncingScrollPhysics(),            slivers: [              SliverAppBar(                // expandedHeight: 150,                // title: Text('All Items',style: GoogleFonts.acme().copyWith(color: Colors.white),),                // ارتفاع الشريط عند تمديده                forceElevated: true,                // stretch: true,                centerTitle: true,                title: Text('All Items'),                // excludeHeaderSemantics: true,                // automaticallyImplyLeading: true,                // primary: true,                // flexibleSpace: FlexibleSpaceBar(                //   title: Text('All Items'),                //   expandedTitleScale: 1,                //   collapseMode: CollapseMode.none,                //   centerTitle: true,                //                //   // background: Image.network(                //   //   'https://fastly.picsum.photos/id/10/400/300.jpg?hmac=LyrDRcAvj_Z4a9nwJxStHJf1g2cEqvFZaq1IKjgvc1w',                //   //   fit: BoxFit.cover,                //   // ),                // ),                // تخصيص الألوان والأيقونات وغيرها                backgroundColor: Colors.black,                pinned: true,                // تثبيت الشريط أثناء التمرير                floating: true,                // عدم ظهور الشريط الأعلى أثناء التمرير                snap: false, // تمديد الشريط بشكل مفاجئ عند التمرير              ),              // SliverPersistentHeader(              //   delegate: AnimatedSliverAppBarDelegate(              //     minHeight: 100, // ارتفاع العنصر عند الحد الأدنى              //     maxHeight: 150, // ارتفاع العنصر عند الحد الأقصى              //     title: Text('All Items'), // العنصر المراد تحريكه              //   ),              //   pinned: true, // تثبيت الـ AppBar أثناء التمرير أم لا              // ),              SliverPersistentHeader(                // floating: false,                pinned: true, // تثبيت Sliver ثابتة أثناء التمرير                delegate: CustomSliverDelegate(                  child: Container(                    height: 120,                    color: Colors.white,                    child: GetBuilder<ItemController>(                      builder: (logic) {                        return ListView.builder(                          physics: BouncingScrollPhysics(),                          scrollDirection: Axis.horizontal,                          itemBuilder: (context, index) {                            return Column(                              children: [                                item_category(logic, index),                                Container(                                  height: 5,                                  width: 60,                                  decoration: BoxDecoration(                                    color: logic.select_cat == index                                        ? Colors.black                                        : null,                                    borderRadius: BorderRadius.circular(15),                                  ),                                ),                              ],                            );                          },                          itemCount: logic.categories.length,                        );                      },                    ),                  ),                ),              ),              if (logic.current_items_selectes.isNotEmpty)                SliverPadding(                  padding: EdgeInsets.symmetric(horizontal: 10),                  sliver: SliverList(                    delegate: SliverChildBuilderDelegate(                      (BuildContext context, int index) {                        return item_widget(logic.current_items_selectes[index],                            logic, context);                      },                      childCount: logic.current_items_selectes.length,                    ),                  ),                ),              if (logic.current_items_selectes.isEmpty)                SliverToBoxAdapter(                  child: Container(                    alignment: Alignment.center,                    margin: EdgeInsets.only(                      top: 100,                    ),                    child: Text(                      'Nothing Items',                      style: GoogleFonts.alata().copyWith(                        fontSize: 20,                      ),                    ),                  ),                ),            ],          ),        );      }      if (logic.statusRequest == StatusRequest.loading) {        return Center(          child: CircularProgressIndicator(),        );      }      if (logic.statusRequest == StatusRequest.failure) {        return Center(          child: Text(            'Fail',            style: TextStyle(fontSize: 30),          ),        );      }      return Center(        child: Text(          'Error !!!!!!!',          style: TextStyle(fontSize: 30),        ),      );    });  }}Widget item_category(ItemController logic, index) {  bool is_svg = logic.categories[index].categoryImage!.substring(              logic.categories[index].categoryImage!.length - 3,              logic.categories[index].categoryImage!.length) ==          'svg'      ? true      : false;  return GestureDetector(    onTap: () {      logic.change_select(index);    },    child: Container(      decoration: BoxDecoration(        color: Colors.grey,        borderRadius: BorderRadius.circular(15),      ),      // alignment: Alignment.center,      margin: EdgeInsets.symmetric(        vertical: 5,        horizontal: 10,      ),      // width: 100,      padding: EdgeInsets.symmetric(vertical: 5, horizontal: 20),      child: Center(          child: Column(        children: [          Container(            height: 50,            width: 50,            child: is_svg                ? SvgPicture.network(                    "${AppLink.image_categories}/${logic.categories[index].categoryImage}")                : Image.network(                    '${AppLink.image_categories}/${logic.categories[index].categoryImage}'),          ),          Center(            child: Text(              logic.categories[index].categoryName.toString(),              style: TextStyle(                color: Colors.white,              ),            ),          ),        ],      )),    ),  );}Widget item_widget(MainItemModel item, ItemController controller, context) {  return Card(    child: Padding(      padding: const EdgeInsets.symmetric(vertical: 10),      child: Column(        crossAxisAlignment: CrossAxisAlignment.end,        children: [          Row(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Container(                alignment: Alignment.topCenter,                height: 100,                width: 100,                child:                    Image.network(AppLink.image_items + '/' + item.itemImage),              ),              SizedBox(                width: 15,              ),              Column(                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  Text(item.itemName),                  SizedBox(                    height: 10,                  ),                  SizedBox(                    width: 150,                    child: Text(                      item.itemDesc,                      overflow: TextOverflow.ellipsis,                      maxLines: 2,                      style: TextStyle(height: 1, fontSize: 12),                    ),                  ),                ],              ),              Spacer(),              Text(                Jiffy(item.itemDate).fromNow(),                style: TextStyle(color: Colors.red),              ),              SizedBox(                width: 10,              ),            ],          ),          Row(            mainAxisAlignment: MainAxisAlignment.end,            children: [              IconButton(                onPressed: () {                  controller.GoToDetails();                },                icon: Icon(Icons.details),              ),              IconButton(                onPressed: () {                  controller.GoToAddEdit(item);                },                icon: Icon(Icons.edit),              ),              IconButton(                onPressed: () {                  controller.delete_item(item, context);                },                icon: Icon(Icons.delete_outline),              ),            ],          ),        ],      ),    ),  );}class CustomSliverDelegate extends SliverPersistentHeaderDelegate {  Widget child;  CustomSliverDelegate({required this.child});  @override  Widget build(      BuildContext context, double shrinkOffset, bool overlapsContent) {    return child;  }  @override  double get maxExtent => 120; // ارتفاع Sliver ثابتة  @override  double get minExtent => 120; // ارتفاع Sliver ثابتة  @override  bool shouldRebuild(CustomSliverDelegate oldDelegate) {    return false;  }}class AnimatedSliverAppBarDelegate extends SliverPersistentHeaderDelegate {  final double minHeight;  final double maxHeight;  final Widget title;  AnimatedSliverAppBarDelegate({    required this.minHeight,    required this.maxHeight,    required this.title,  });  @override  double get minExtent => minHeight;  @override  double get maxExtent => max(maxHeight, minHeight);  @override  Widget build(    BuildContext context,    double shrinkOffset,    bool overlapsContent,  ) {    final progress = (shrinkOffset / (maxExtent - minExtent)).clamp(0.0, 1.0);    // تأثير الانتقال لعنصر العنوان بناءً على القيمة المستخدمة لـ progress    final titleSize = (1 - progress) * 20 + 14; // حجم العنوان    final titleOpacity = 1 - progress; // شفافية العنوان    return AppBar(      title: Opacity(        opacity: titleOpacity,        child: Text(          'All Items',          style: TextStyle(fontSize: titleSize),        ),      ),      // تخصيص الشكل والسلوك الإضافي لـ AppBar      // ...    );  }  @override  bool shouldRebuild(covariant SliverPersistentHeaderDelegate oldDelegate) {    return true;  }}